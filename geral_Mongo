// Cria as coleções
db.createCollection("documento");
db.createCollection("pessoa");
db.createCollection("pessoa_fisica");
db.createCollection("pessoa_juridica");
db.createCollection("motorista");
db.createCollection("carro");
db.createCollection("locacao");
db.createCollection("filial");
db.createCollection("funcionario");
db.createCollection("filial_carro");
db.createCollection("filial_documento");
db.createCollection("seguro");
db.createCollection("carro_seguro");

function cadastra_filial(nome, endereco, cidade, telefone, email, capacidade, id_documentos)
{
    var possui_cnpj = false;
    var id_filial;
    id_documentos.forEach(function (_id)
    {
        var documento = db.documento.findOne({
            _id: _id
        });

        if (documento.tipo === 'CNPJ')
        {
            possui_cnpj = true;
        }

        if (documento.dt_validade !== null && documento.dt_validade < new Date())
        {
            throw new Error('Documento ' + documento.numero + ' está vencido');
        }
    });

    if (!possui_cnpj)
    {
        throw new Error('Para cadastrar uma filial é necessário informar um CNPJ');
    }

    var result = db.filial.insertOne({
        nome: nome,
        endereco: endereco,
        cidade: cidade,
        telefone: telefone,
        email: email,
        capacidade: capacidade
    });

    id_filial = result.insertedId;

    return id_filial;
}

function alugar(id_carro, id_motorista, id_funcionario, dt_locacao, dt_devolucao)
{
    var carro = db.carro.findOne({
        _id: id_carro,
        situacao: false
    });

    if (!carro)
    {
        throw new Error('O carro está indisponível');
    }

    var dias = Math.ceil((dt_devolucao - dt_locacao) / (1000 * 60 * 60 * 24));

    var locacao = {
        id_carro: id_carro,
        id_motorista: id_motorista,
        id_funcionario: id_funcionario,
        dt_locacao: dt_locacao,
        dt_devolucao: dt_devolucao,
        valor_estimado: dias * carro.valor_diaria
    };

    var result = db.locacao.insertOne(locacao);
    var id_locacao = result.insertedId;

    db.carro.updateOne({
        _id: id_carro
    }, {
        $set: {
            situacao: true
        }
    });

    return id_locacao;
}

function verificarCNHVencida(documento)
{
    if (documento.tipo === 'CNH' && documento.dt_validade < new Date())
    {
        throw new Error('A CNH está vencida para o documento com ID ' + documento._id);
    }

    return documento;
}

function calcular_acrescimos(id_carro_devolucao, tanque_atual, preco_gasolina, tipo_avaria)
{
    var preco_total;
    var preco_diaria;
    var capacidade_tanque;
    var alugado;

    alugado = db.carro.findOne({
        _id: id_carro_devolucao
    }).situacao;

    if (alugado)
    {
        capacidade_tanque = db.carro.findOne({
            _id: id_carro_devolucao
        }).capacidade_tanque;

        var locacaoData = db.locacao.findOne(
            {
                id_carro: id_carro_devolucao
            },
            null,
            {
                _id: -1
            }
        );

        preco_diaria = locacaoData.valor_estimado;
        locacao = locacaoData.dt_locacao;
        devolucao = locacaoData.dt_devolucao;

        preco_total = preco_diaria + (Math.abs(capacidade_tanque - tanque_atual) * preco_gasolina);

        if (tipo_avaria.length > 0)
        {
            var seguroData = db.carro.aggregate([
                {
                    $match: {
                        _id: id_carro_devolucao
                    }
                },
                {
                    $lookup: {
                        from: "carro_seguro",
                        localField: "_id",
                        foreignField: "id_carro",
                        as: "carro_seguro"
                    }
                },
                {
                    $unwind: "$carro_seguro"
                },
                {
                    $lookup: {
                        from: "seguro",
                        localField: "carro_seguro.id_seguro",
                        foreignField: "id",
                        as: "seguro"
                    }
                },
                {
                    $unwind: "$seguro"
                },
                {
                    $match: {
                        "seguro.descricao": {
                            $in: tipo_avaria
                        }
                    }
                },
                {
                    $group: {
                        _id: null,
                        preco_seguro: {
                            $sum: "$seguro.valor"
                        }
                    }
                }
            ]).toArray();

            if (seguroData.length > 0)
            {
                preco_total += seguroData[0].preco_seguro;
            }

            db.locacao.updateOne({
                _id: locacaoData._id
            }, {
                $set: {
                    avaria: true
                }
            });
        } else
        {
            db.locacao.updateOne({
                _id: locacaoData._id
            }, {
                $set: {
                    avaria: false
                }
            });
        }

        db.locacao.updateOne({
            _id: locacaoData._id
        }, {
            $set: {
                valor_total: preco_total
            }
        });

        print("Custos totais de utilizacao do Carro " + id_carro_devolucao + " é " + preco_total);
        return preco_total;
    } else
    {
        throw new Error("Carro não está alugado para calcular acrescimos");
    }
}

function devolver_carro(id_carro_devolucao, tanque_atual, preco_gasolina, kilometragem_utilizada, tipo_avaria)
{
    var carro = db.carro.findOne({
        _id: id_carro_devolucao
    });

    if (carro.situacao)
    {
        calcular_acrescimos(id_carro_devolucao, tanque_atual, preco_gasolina, tipo_avaria);

        var locacao = db.locacao.findOne(
            {
                id_carro: id_carro_devolucao
            },
            null,
            {
                _id: -1
            }
        );

        db.locacao.updateOne({
            _id: locacao._id
        }, {
            $set: {
                km_rodados: kilometragem_utilizada
            }
        });

        db.carro.updateOne({
            _id: id_carro_devolucao
        }, {
            $inc: {
                km_rodados: kilometragem_utilizada
            },
            $set: {
                situacao: false
            }
        });
        print('Carro Devolvido');
    } else
    {
        throw 'Carro não está alugado para ser devolvido';
    }
}

// Inserção na coleção pessoa
db.pessoa.insertOne({
    _id: 10,
    telefone: '99999-9999',
    endereco: 'Rua AAA, Num 201',
    cidade: 'Porto Alegre',
    email: 'empresa.super.nova.tec@email.com.br'
});

// Inserção na coleção pessoa_juridica
db.pessoa_juridica.insertOne({
    id_pessoa: 10,
    nome_fantasia: 'Super Nova Tec',
    razao_social: 'Super Nova Tecnologia LTDA',
    dt_abertura: ISODate('2010-01-01')
});

// Inserção na coleção documento
db.documento.insertMany([
    {
        _id: 20,
        id_pessoa: 10,
        tipo: 'CNPJ',
        numero: '12345678901234',
        dt_emissao: ISODate('2010-01-01'),
        dt_validade: null
    },
    {
        _id: 21,
        id_pessoa: 10,
        tipo: 'ALVARA',
        numero: '12345678901234',
        dt_emissao: ISODate('2020-12-05'),
        dt_validade: ISODate('2024-06-05')
    }
]);

// Inserção na coleção pessoa
db.pessoa.insertOne({
    _id: 11,
    telefone: '99999-9999',
    endereco: 'Rua BBB, Num 333',
    cidade: 'Porto Alegre',
    email: 'empresa.super.velha.tec@email.com.br'
});

// Inserção na coleção pessoa_juridica
db.pessoa_juridica.insertOne({
    id_pessoa: 11,
    nome_fantasia: 'Super Velha Tec',
    razao_social: 'Super Velha Tecnologia LTDA',
    dt_abertura: ISODate('2002-10-01')
});

// Inserção na coleção documento
db.documento.insertMany([
    {
        _id: 22,
        id_pessoa: 11,
        tipo: 'CNPJ',
        numero: '12345678901234',
        dt_emissao: ISODate('2002-10-01'),
        dt_validade: null
    },
    {
        _id: 23,
        id_pessoa: 11,
        tipo: 'PPIC',
        numero: '12345678901234',
        dt_emissao: ISODate('2004-07-23'),
        dt_validade: ISODate('2022-06-05')
    }
]);

// 2 PROCEDURE

// Inserção na coleção pessoa
db.pessoa.insertMany([
    {
        _id: 15,
        telefone: '99999-9999',
        endereco: 'Rua CCC, Num 300',
        cidade: 'Porto Alegre',
        email: 'pessoaaleatoria@email.com'
    },
    {
        _id: 16,
        telefone: '98888-8888',
        endereco: 'Rua DDD, Num 400',
        cidade: 'Canoas',
        email: 'pessoaaleatoria2@email.com'
    }
]);

// Inserção na coleção pessoa_fisica
db.pessoa_fisica.insertMany([
    {
        id_pessoa: 15,
        nome: 'João Pedro',
        dt_nascimento: ISODate('2000-03-10'),
        genero: 'M'
    },
    {
        id_pessoa: 16,
        nome: 'Joaquim',
        dt_nascimento: ISODate('1980-05-23'),
        genero: 'M'
    }
]);

// Inserção na coleção filial
db.filial.insertOne({
    _id: 5,
    nome: 'Filial 3',
    endereco: 'Rua EEE, Num 555',
    cidade: 'Canoas',
    telefone: '97777-7777',
    email: 'filial3@email.com',
    capacidade: 50
});

// Inserção na coleção funcionario
db.funcionario.insertOne({
    id_pessoa_fisica: 16,
    matricula: '00002',
    data_admissao: ISODate('2020-02-13'),
    situacao: true,
    cargo: 'Vendedor',
    salario: 3000,
    id_filial: 5
});

// Inserção na coleção motorista
db.motorista.insertOne({
    _id: 15,
    id_pessoa_fisica: 15,
    id_pessoa: 15
});

// Inserção na coleção carro
db.carro.insertOne({
    _id: 6,
    placa: 'IBC123',
    modelo: 'UNO',
    ano: 2000,
    cor: 'Azul',
    km_rodados: 1000,
    valor_diaria: 150,
    capacidade_tanque: 100,
    situacao: false
});

// 3 PROCEDURE

// Inserção na coleção pessoa
db.pessoa.insertOne({
    _id: 1,
    telefone: '91981-4451',
    endereco: 'Rua A, numero 01',
    cidade: 'Porto Alegre',
    email: 'pedro@gmail.com.br'
});

// Inserção na coleção pessoa_fisica
db.pessoa_fisica.insertOne({
    id_pessoa: 1,
    nome: 'Pedro Sanches',
    dt_nascimento: ISODate('1978-05-01'),
    genero: 'masculino'
});

//errado
db.documento.insertOne({
    id: 1,
    id_pessoa: 1,
    numero: '25823277534',
    tipo: 'CNH',
    dt_emissao: ISODate('2015-02-21'),
    dt_validade: ISODate('2020-02-21')
});

//certo
db.documento.insertOne({
    id: 1,
    id_pessoa: 1,
    numero: '25823277534',
    tipo: 'CNH',
    dt_emissao: ISODate('2015-02-21'),
    dt_validade: ISODate('2025-02-21')
});

// 5 PROCEDURE

//insert seguros
db.seguro.insertOne({
    id: 1,
    descricao: 'FURTO',
    valor: 300.0000,
    dt_inicio: new Date('2023-06-05'),
    dt_fim: new Date('2024-06-05')
});

db.seguro.insertOne({
    id: 2,
    descricao: 'DANO',
    valor: 500.0000,
    dt_inicio: new Date('2023-06-05'),
    dt_fim: new Date('2024-06-05')
});

db.seguro.insertOne({
    id: 3,
    descricao: 'ACIDENTE',
    valor: 1500.0000,
    dt_inicio: new Date('2023-06-05'),
    dt_fim: new Date('2024-06-05')
});

// Vincula o carro ao seguro
db.carro_seguro.insertMany([
    {
        id_carro: 6,
        id_seguro: 1
    },
    {
        id_carro: 6,
        id_seguro: 2
    },
    {
        id_carro: 6,
        id_seguro: 3
    }
]);
