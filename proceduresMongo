function f_cadastra_filial( nome, endereco, cidade, telefone, email, capacidade, id_documentos ) { var possui_cnpj =n2> function f_cadastra_filial( nome, endereco, cidade, telefone, email, capacidade, id_documentos ) { var possui_cnpj = false; var id_filial; id_documentos.forEach(function (id) { var documento = db.documento.findOne({ id: id }); if (documento.tipo === 'CNPJ') { possui_cnpj = true; } if ( documento.dt_validade !== null && documento.dt_validade < new Date() ) { throw new Error( 'Documento ' + documento.numero + ' está vencido' ); } }); if (!possui_cnpj) { throw new Error('Para cadastrar uma filial é necessário informar um CNPJ'); } var result = db.filial.insertOne({ nome: nome, endereco: endereco, cidade: cidade, telefone: telefone, email: email, capacidade: capacidade }); id_filial = result.insertedId; return id_filial; }


function alugar(id_carro, id_motorista, id_funcionario, dt_locacao, dt_devolucao) { var carro = db.carro.findOne({ id: id_carro, situacao: false }); if (!carro) { throw new Error('O carro está indisponível'); } var dias = Math.ceil((dt_devolucao - dt_locacao) / (1000 * 60 * 60 * 24)); var locacao = { id_carro: id_carro, id_motorista: id_motorista, id_funcionario: id_funcionario, dt_locacao: dt_locacao, dt_devolucao: dt_devolucao, valor_estimado: dias * carro.valor_diaria }; var result = db.locacao.insertOne(locacao); var id_locacao = result.insertedId; db.carro.updateOne({ id: id_carro }, { $set: { situacao: true } }); return id_locacao; }

function verificarCNHVencida(documento) { if (documento.tipo === 'CNH' && documento.dt_validade < new Date()) { throw new Error('A CNH está vencida para o documento com ID ' + documento._id); } return documento; }

function calcular_acrescimos(id_carro_devolucao, tanque_atual, preco_gasolina, tipo_avaria) { var preco_total; var preco_diaria; var preco_seguro; var capacidade_tanque; var locacao; var devolucao; var alugado; alugado = db.carro.findOne({ id: id_carro_devolucao }).situacao; if (alugado) { capacidade_tanque = db.carro.findOne({ id: id_carro_devolucao }).capacidade_tanque; var locacaoData = db.locacao.find({ id_carro: id_carro_devolucao }).sort({ id: -1 }).limit(1); locacaoData.forEach(function (loc) { preco_diaria = loc.valor_estimado; locacao = loc.dt_locacao; devolucao = loc.dt_devolucao; }); preco_total = preco_diaria + (Math.abs(capacidade_tanque - tanque_atual) * preco_gasolina); if (tipo_avaria.length > 0) { var seguroData = db.carro.aggregate([ { $match: { id: id_carro_devolucao } }, { $lookup: { from: "carro_seguro", localField: "id", foreignField: "id_carro", as: "seguros" } }, { $unwind: "$seguros" }, { $lookup: { from: "seguro", localField: "seguros.id_seguro", foreignField: "id", as: "seguro" } }, { $unwind: "$seguro" }, { $match: { "seguro.descricao": { $in: tipo_avaria } } }, { $group: { _id: null, valor: { $sum: "$seguro.valor" } } } ]).toArray(); if (seguroData.length > 0) { preco_seguro = seguroData[0].valor; preco_total += preco_seguro; } db.locacao.updateOne({ id: locacaoData[0].id }, { $set: { avaria: true } }); } else { db.locacao.updateOne({ id: locacaoData[0].id }, { $set: { avaria: false } }); } db.locacao.updateOne({ id: locacaoData[0].id }, { $set: { valor_total: preco_total } }); print("Custos totais de utilizacao do Carro " + id_carro_devolucao + " é " + preco_total); return preco_total; } else { throw new Error("Carro não está alugado para calcular acrescimos"); } }

function devolver_carro(id_carro_devolucao, tanque_atual, preco_gasolina, kilometragem_utilizada, tipo_avaria) { var carro = db.carro.findOne({ id: id_carro_devolucao }); if (carro.situacao) { calcular_acrescimos(id_carro_devolucao, tanque_atual, preco_gasolina, tipo_avaria); var locacao = db.locacao.find({ id_carro: id_carro_devolucao }).sort({ id: -1 }).limit(1); db.locacao.updateOne( { id: locacao[0].id }, { $set: { km_rodados: kilometragem_utilizada } } ); db.carro.updateOne( { id: id_carro_devolucao }, { $inc: { km_rodados: kilometragem_utilizada }, $set: { situacao: false } } ); print('Carro Devolvido'); } else { throw 'Carro não está alugado para ser devolvido'; } }